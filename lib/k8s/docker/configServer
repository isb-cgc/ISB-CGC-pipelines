#!/usr/bin/env python
import os
import re
import json
import webapp2
import argparse

from StringIO import StringIO
from paste import httpserver
from pipelines.routes import *
from pipelines.config import PipelineConfig, PipelineConfigError


CONFIG = PipelineConfig(path=os.environ["PIPELINES_CONFIG"])


class ConfigServerError(Exception):
	def __init__(self, msg):
		super(ConfigServerError, self).__init__()


class ConfigWriter(webapp2.RequestHandler):
	def post(self):
		resp = None
		status = None

		if re.match(CONFIG_UPDATE_EXP, self.request.path):
			# request format:
			#
			# {
			#   "section": <section>,
			#   "option": <option>,
			#   "value": <value>
			# }
			#
			section = self.request.get("section")
			option = self.request.get("option")
			value = self.request.get("value")
			try:
				CONFIG.update(section, option, value)

			except PipelineConfigError as e:
				resp = {
					"msg": e
				}
				status = 400

			else:
				status = 204

		else:
			self.response.set_status(404, "Resource {r} not found".format(r=self.request.path))

		if resp is not None:
			self.response.out = StringIO(json.dumps(resp))

		self.response.set_status(status)


app = webapp2.WSGIApplication([
	(CONFIG_UPDATE_EXP, ConfigWriter),
], debug=True)


def main(host, port):
	httpserver.serve(app, host=host, port=port)


if __name__ == "__main__":
	parser = argparse.ArgumentParser()
	parser.add_argument("--host", required=False, default="0.0.0.0")
	parser.add_argument("--port", required=True)
	args = parser.parse_args()
	main(args.host, args.port)
