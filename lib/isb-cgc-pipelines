#!/usr/bin/env python
import os
import argparse
import httplib2
from googleapiclient import discovery
from oauth2client.client import GoogleCredentials
from pipelines.utils import PipelinesConfig, PipelineServiceUtils, PipelineSchedulerUtils


PIPELINES_CONFIG_PATH = os.path.join(os.environ["HOME"], ".isb-cgc-pipelines", "config")


def main(args, unknown):
	if args.subcommand == "bootstrap":
		config = PipelinesConfig(PIPELINES_CONFIG_PATH)

		# API service objects
		credentials = GoogleCredentials.get_application_default()
		http = credentials.authorize(httplib2.Http())
		if credentials.access_token_expired:
			credentials.refresh(http)

		pubsub = discovery.build('pubsub', 'v1', http=http)
		logging = discovery.build('logging', 'v2beta1', http=http)

		PipelineServiceUtils.bootstrapMessageHandlers(pubsub, logging, config, mode="local")

	elif args.subcommand == "scheduler":
		config = PipelinesConfig(PIPELINES_CONFIG_PATH)
		user = os.environ["USER"]

		if args.schedulerOperation == "stop":
			PipelineSchedulerUtils.stopScheduler()
		elif args.schedulerOperation == "start":
			PipelineSchedulerUtils.startScheduler(config, user)
		else:
			print "ERROR: unrecognized option {o}".format(o=args.startOrStop)
			exit(-1)

	if args.subcommand == "submit":
		config = PipelinesConfig(PIPELINES_CONFIG_PATH)
		PipelineSchedulerUtils.submitPipeline(args, config)

	if args.subcommand == "edit":
		config = PipelinesConfig(PIPELINES_CONFIG_PATH)
		PipelineSchedulerUtils.editPipeline(args, config)

	elif args.subcommand == "stop":
		config = PipelinesConfig(PIPELINES_CONFIG_PATH)
		PipelineSchedulerUtils.stopPipeline(args, config)

	elif args.subcommand == "restart":
		config = PipelinesConfig(PIPELINES_CONFIG_PATH)
		PipelineSchedulerUtils.restartJobs(args, config)

	elif args.subcommand == "logs":
		config = PipelinesConfig(PIPELINES_CONFIG_PATH)
		PipelineSchedulerUtils.getJobLogs(args, config)

	elif args.subcommand == "list":
		config = PipelinesConfig(PIPELINES_CONFIG_PATH)

		if args.entity == "jobs":
			PipelineSchedulerUtils.getJobsList(args, unknown, config)

	elif args.subcommand == "config":
		parser = argparse.ArgumentParser()

		if args.configOperation == "set":
			parser.add_argument("parameter", choices=["gcp/project_id", "gcp/zones", "gcp/scopes", "gcp/serviceAccount", "pipelines/autorestartPreempted", "all"])
			args, value = parser.parse_known_args(args=unknown)

			if args.parameter == "all":
				config = PipelinesConfig(PIPELINES_CONFIG_PATH, first_time=True)

			else:
				config = PipelinesConfig(PIPELINES_CONFIG_PATH)
				section, option = args.parameter.split('/')
				try:
					config.update(section, option, value)
				except ValueError as e:
					print "ERROR: couldn't update the configuration : {reason}".format(reason=e)
					exit(-1)

if __name__ == "__main__":
	parser = argparse.ArgumentParser(description="")
	subparsers = parser.add_subparsers(dest="subcommand")

	deploy = subparsers.add_parser("bootstrap")

	scheduler = subparsers.add_parser("scheduler")
	scheduler.add_argument("schedulerOperation", choices=["start", "stop"])

	submit = subparsers.add_parser("submit", conflict_handler="resolve")
	submit.add_argument("--pipelineName", required=True)
	submit.add_argument("--imageName", required=True)
	submitGrp = submit.add_mutually_exclusive_group(required=True)
	submitGrp.add_argument("--scriptUrl")
	submitGrp.add_argument("--cmd")
	submit.add_argument("--logsPath", required=True)
	submit.add_argument("--diskSize", required=False, default=None)
	submit.add_argument("--diskType", required=False, default=None)
	submit.add_argument("--cores", required=False, default=1)
	submit.add_argument("--mem", required=False, default=1)
	submit.add_argument("--inputs", required=False, default=None)
	submit.add_argument("--outputs", required=False, default=None)
	submit.add_argument("--env", required=False, default=None)
	submit.add_argument("--tag", required=False, default=None)
	submit.add_argument("--preemptible", action="store_true", default=False)

	edit = subparsers.add_parser("edit")
	edit.add_argument("--jobId")

	stop = subparsers.add_parser("stop")
	stopGrp = stop.add_mutually_exclusive_group()
	stopGrp.add_argument("--jobId")
	stopGrp.add_argument("--pipeline")
	stopGrp.add_argument("--tag")

	restart = subparsers.add_parser("restart")
	restartGrp = restart.add_mutually_exclusive_group()
	restartGrp.add_argument("--jobId")
	restartGrp.add_argument("--preempted", action="store_true")

	logs = subparsers.add_parser("logs")
	logs.add_argument("jobId")
	logs.add_argument("--stderr", action="store_true")
	logs.add_argument("--stdout", action="store_true")

	lst = subparsers.add_parser("list")
	lst.add_argument("entity", choices=["jobs", "schemas"])
	
	config = subparsers.add_parser("config")
	config.add_argument("configOperation", choices=["set"])
	
	args, unknown = parser.parse_known_args()
	main(args, unknown)
